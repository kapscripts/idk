local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local WEBHOOK_URL = "https://discord.com/api/webhooks/1417006443214934046/gxsfCxKms4LKy5BwK8dIkg8oYdkN6xe-NM86ScNoBq9zXrqgfrLMkWQuQRtdcNkPsEke"

repeat wait() until game:IsLoaded()

local PlaceId = game.PlaceId
local JobId = game.JobId
local Player = Players.LocalPlayer
local MIN_OPEN_SLOTS = 1

local function get_request()
    if request then return request end
    if syn and syn.request then return syn.request end
    if http and http.request then return http.request end
    return nil
end

local r = get_request()
if not r then return end

local function send_embed(brainrot, price)
    local placeId = tostring(game.PlaceId)
    local jobId = tostring(game.JobId)
    local joinLink = string.format("https://kapscripts.github.io/BotHub/?placeId=%s&gameInstanceId=%s", placeId, jobId)
    local joinScript = string.format('game:GetService("TeleportService"):TeleportToPlaceInstance(%s,"%s",game.Players.LocalPlayer)', placeId, jobId)

    local payload = HttpService:JSONEncode({
        embeds = {
            {
                title = "🧠 Brainrot Notify | FUCK CHILI HUB",
                color = 0x00FFFF,
                fields = {
                    { name = "🔤 Name", value = brainrot, inline = true },
                    { name = "💰 Money per sec", value = price, inline = true },
                    { name = "👥 Players", value = tostring(#game.Players:GetPlayers()) .. "/8", inline = true },
                    { name = "🆔 Job ID (Mobile)", value = jobId, inline = false },
                    { name = "🆔 Job ID (PC)", value = "```" .. jobId .. "```", inline = false },
                    { name = "🔗 Join Link", value = "[Click to Join](" .. joinLink .. ")", inline = false },
                    { name = "📜 Join Script (PC)", value = "```lua\n" .. joinScript .. "\n```", inline = false }
                },
                footer = { text = "Made by Chilli Hub | " .. os.date("Today at %I:%M %p") }
            }
        }
    })

    local succ, tx = pcall(function()
        return r({
            Url = WEBHOOK_URL,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = payload
        })
    end)

    if not succ then
        warn("❌ Failed to send webhook:", tx)
    else
        print("✅ Webhook sent successfully.")
    end
end

local function parseFormattedNumber(str)
    str = str:gsub("%$", ""):gsub("/s", ""):gsub("%s+", "")
    local num, suffix = str:match("([%d%.]+)([KMBT]?)")
    num = tonumber(num)
    if not num then return nil end

    local multipliers = {
        K = 1e3,
        M = 1e6,
        B = 1e9,
        T = 1e12
    }

    return num * (multipliers[suffix] or 1)
end

local plots = workspace:WaitForChild("Plots")

local function getlocalbase(plr)
    for i,v in plots:GetDescendants() do 
        if v.Name == "TextLabel" and v.Text then
            if v.Text:find(plr.Name) then
                return v.Parent.Parent.Parent.Parent
            end
        end
    end
end

local localplot = getlocalbase(Player)

local function gethighestprice()
    local price, brainrot, strprice = 0, nil, ""
    for i,v in plots:GetDescendants() do
        if not v:IsDescendantOf(localplot) and v.Name == "Generation" then
            local number = parseFormattedNumber(v.Text)
            local brainrotname = v.Parent.DisplayName.Text
            if number and number > price then
                price = number
                brainrot = brainrotname
                strprice = v.Text
            end
        end
    end
    if price > 900000 then
        send_embed(brainrot, strprice)
        return true
    end
    return false 
end

-- Server hopping functions
local function persist(code)
    if syn and syn.queue_on_teleport then syn.queue_on_teleport(code) return end
    if queue_on_teleport then queue_on_teleport(code) return end
end

local function getAvailableServers()
    local servers = {}
    local cursor = nil

    while true do
        local url = ("https://games.roblox.com/v1/games/%d/servers/Public?limit=100&excludeFullGames=true"):format(PlaceId)
        if cursor then url = url .. "&cursor=" .. cursor end

        local success, result = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)

        if success and result and result.data then
            for _, server in ipairs(result.data) do
                local open = server.maxPlayers - server.playing
                if server.id ~= JobId and open >= MIN_OPEN_SLOTS then
                    table.insert(servers, server)
                end
            end

            if result.nextPageCursor then
                cursor = result.nextPageCursor
            else
                break
            end
        else
            break
        end
    end

    return servers
end

local function teleportToServer(serverId)
    local success, err = pcall(function()
        TeleportService:TeleportToPlaceInstance(PlaceId, serverId, Player)
    end)
    if not success then
        warn("Failed to teleport:", err)
    end
end

local function rejoinCurrentServer()
    print("⚠️ No servers available, rejoining current server...")
    local success, err = pcall(function()
        TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Player)
    end)
    if not success then
        warn("Failed to rejoin:", err)
    end
end

local function searchUntilFound()
    local lastFound = tick()

    while true do
        local servers = getAvailableServers()

        if #servers > 0 then
            lastFound = tick()
            for _, server in ipairs(servers) do
                print("🔄 Attempting to join server:", server.id)
                teleportToServer(server.id)
                task.wait(0.1)
            end
        else
            if tick() - lastFound >= 10 then
                rejoinCurrentServer()
                lastFound = tick()
            end
            task.wait(0.1)
        end
    end
end

-- Main logic
local foundHighValue = gethighestprice()

if foundHighValue or not foundHighValue then
    wait(1)
    
    persist(string.format([[loadstring(game:HttpGet('%s'))()]], "https://raw.githubusercontent.com/kapscripts/idk/refs/heads/main/iugohfds"))
    
    searchUntilFound()
end
